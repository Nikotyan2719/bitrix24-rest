---
const example = JSON.stringify({ "name": "api.info" });
---

<div x-data="bitrixApp" class="app">
    <h1 class="text-center text-3xl font-bold">API Bitrix24</h1>
    <div class="flex flex-col gap-12">
        <div class="m-5">
            <h2 class="text-2xl mb-3">Пример использования REST API</h2>
            <div class="grid grid-cols-4 gap-3 mb-12">
                <div>
                    <h3 class="text-2xl mb-3">Получение информации</h3>
                    <div class="flex flex-col gap-3 items-start">
                        <button @click="getProfile" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить профиль пользователя</button>
                        <button @click="getAppInfo" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить информацию о приложении</button>
                        <button @click="checkUserAccess" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Проверить права пользователя</button>
                        <button @click="getChats" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить список чатов</button>
                        <button @click="getAvailableMethods" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить доступные методы</button>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl mb-3">Действия со сделками</h3>
                    <div class="flex flex-col gap-3 items-start">
                        <button @click="createDeal" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Создать сделку</button>
                        <button @click="getDeals" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить список сделок</button>
                        <button @click="deleteDeal" class="p-2 border rounded-sm border-gray-500 bg-red-300 font-bold cursor-pointer">Удалить сделку</button>
                        <button @click="deleteAllDeals" class="p-2 border rounded-sm border-gray-500 bg-red-300 font-bold cursor-pointer">Удалить ВСЕ сделки</button>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl mb-3">Действия с календарем</h3>
                    <div class="flex flex-col gap-3 items-start">
                        <button @click="createCalendarSection" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Создать новый календарь</button>
                        <button @click="deleteCalendarSection" class="p-2 border rounded-sm border-gray-500 bg-red-300 font-bold cursor-pointer">Удалить календарь</button>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl mb-3">Действия с лентой</h3>
                    <div class="flex flex-col gap-3 items-start">
                        <button @click="addBlogPost" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Добавить сообщение в блог</button>
                        <button @click="getBlogPost" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Получить все сообщения в блоге</button>
                        <button @click="postCommentPost" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer">Добавить комментарий к сообщению в блоге</button>
                        <button @click="deleteBlogPost" class="p-2 border rounded-sm border-gray-500 bg-red-300 font-bold cursor-pointer">Удалить сообщение в блогe</button>
                    </div>
                </div>
            </div>
            <div class="grid grid-cols-3 gap-12 items-start">
                <div x-ref="restResult" class="result col-span-2 my-2.5 p-2.5 border rounded-sm border-gray-500 overflow-x-auto"></div>
                <div class="mb-12 flex justify-center">
                    <div class="grid grid-cols-2 gap-3 w-full grow-0">
                        <h3 class="col-span-2 text-2xl text-center">Вручную указать метод</h3>
                        <div class="flex flex-col">
                            <label for="method">Метод</label>
                            <input id="method" x-model="method" type="text" class="p-2 border rounded-sm border-gray-500"/>
                        </div>
                        <div class="flex flex-col">
                            <label for="params">Параметры</label>
                            <textarea id="params" x-model="params" rows="1" class="p-2 border rounded-sm border-gray-500"/>
                        </div>
                        <button @click="sendRequest" class="p-2 border rounded-sm border-gray-500 bg-blue-300 font-bold cursor-pointer col-span-2">Подтвердить</button>
                        <div class="col-span-2 text-blue-400">
                            <p>Например <span class="text-blue-600">method.get</span> - <span class="text-blue-600">{example}</span></p>
                            <p>Пример параметров: <a class="underline text-red-300" target="_blank" href="https://apidocs.bitrix24.ru/api-reference/crm/deals/crm-deal-add.html">https://apidocs.bitrix24.ru/api-reference/crm/deals/crm-deal-add.html</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
  import api from "../../../api/rest/rest";

  document.addEventListener("alpine:init", () => {
    window.Alpine.data("bitrixApp", () => ({
      api,
      title: "",
      method: "",
      params: "",
      result: null,
      error: null as any,

      displayRestResult(title: string, data: any) {
        this.title = title;
        this.result = data;
        this.$refs.restResult.innerHTML = `<h4>${title}</h4><pre>${JSON.stringify(data, null, 2)}</pre>`;
      },

      displayRestError(message: string) {
        this.error = message;
        this.$refs.restResult.innerHTML = `<div style="color: red;">Ошибка: ${message}</div>`;
      },

      async sendRequest() {
        try {
          const params = this.params && this.params.trim() ? JSON.parse(this.params) : undefined;
          const result = await this.api.callApi(this.method, params );
          this.displayRestResult("Результат", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getProfile() {
        try {
          const result = await this.api.getProfile();
          this.displayRestResult("Профиль пользователя", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getAppInfo() {
        try {
          const result = await this.api.getAppInfo();
          this.displayRestResult("Информация о приложении", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async checkUserAccess() {
        try {
          const adminResult = await this.api.getAdminInfo();
          const accessResult = await this.api.getAccessInfo();
          const result = {
            isAdmin: adminResult,
            hasAccess: accessResult,
          };
          this.displayRestResult("Права пользователя", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async addBlogPost() {
        try {
          const params = {
            POST_TITLE: "Заголовок",
            POST_MESSAGE: "Текст",
          };
          const result = await this.api.postBlogPost(params);
          this.displayRestResult("Результат добавления сообщения", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getAvailableMethods() {
        try {
          const result = await this.api.getAvailableMethods();
          this.displayRestResult("Доступные методы", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async createDeal() {
        try {
          const params = {
            fields: {
              TITLE: "Новая сделка",
              STAGE_ID: "NEW",
              OPPORTUNITY: 10000,
              CURRENCY_ID: "RUB",
            },
          };
          const result = await this.api.postDeal(params);
          this.displayRestResult("Создание сделки", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getDeals() {
        try {
          const params = {
            select: ["ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "CURRENCY_ID", "DATE_CREATE", "RESPONSIBLE_ID"],
          };
          const result = await this.api.getDeals(params);
          if (!result) {
            this.displayRestResult("Список сделок пуст", []);
            return;
          }
          this.displayRestResult("Список сделок", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async deleteDeal() {
        try {
          const dealId = prompt("Введите ID сделки для удаления:");
          if (!dealId) return;
          const result = await this.api.deleteDeal(parseInt(dealId));
          this.displayRestResult("Удаление сделки", result);
          await this.getDeals();
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async deleteAllDeals() {
        try {
          const results = await this.api.deleteAllDeals();
          this.displayRestResult("Удаление сделок", {
            message: `Успешно удалено ${results.filter((id) => id !== null).length} из ${results.length} сделок`,
          });
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async postCommentPost() {
        try {
          const postId = prompt("Введите ID поста:");
          if (!postId) return;
          const message = prompt("Введите текст комментария:");
          if (!message) return;
          const params = {
            POST_ID: parseInt(postId),
            TEXT: message,
          };
          const result = await this.api.postComment(params);
          this.displayRestResult("Сообщение добавленно", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getBlogPost() {
        try {
          const result = await this.api.getPosts();
          this.displayRestResult("Все сообщения в блоге:", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async deleteBlogPost() {
        try {
          const postId = prompt("Введите ID сделки для удаления:");
          if (!postId) return;
          const result = await this.api.deletePost(parseInt(postId));
          this.displayRestResult("Удаление поста", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async createCalendarSection() {
        try {
          const profileResult = await this.api.getProfile();
          const ownerId = profileResult.ID;
          const params = {
            type: "user",
            ownerId: ownerId,
            name: "Новый календарь",
            description: "Мой новый календарь",
            color: "#9cbeee",
            text_color: "#283000",
            export: {
              ALLOW: false,
              SET: "3_9",
            },
          };
          const result = await this.api.postCalendar(params);
          this.displayRestResult("Результат создания календаря", {
            id: result,
            message: "Календарь успешно создан",
          });
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async deleteCalendarSection() {
        try {
          const calendarId = prompt("Введите ID календаря для удаления:");
          if (!calendarId) return;
          const profileResult = await this.api.getProfile();
          const params = {
            type: "user",
            ownerId: profileResult.ID,
            id: parseInt(calendarId),
          };
          await this.api.deleteCalendar(params);
          this.displayRestResult("Результат удаления календаря", { message: "Календарь успешно удален" });
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

      async getChats() {
        try {
          const result = await this.api.getChats();
          this.displayRestResult("Список чатов", result);
        } catch (error: any) {
          this.displayRestError(error.message);
        }
      },

    }));
  });
</script>